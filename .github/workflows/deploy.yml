name: 🎓 Deploy Campus Hub

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test Application
    
    services:
      sqlite:
        image: keinos/sqlite3:latest
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, bcmath, gd, zip, curl, sqlite3, pdo_sqlite
        tools: composer
        
    - name: 📦 Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: 🔧 Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
      
    - name: 📄 Copy environment file
      run: cp .env.example .env
      
    - name: 🔑 Generate application key
      run: php artisan key:generate
      
    - name: 🗄️ Create SQLite database
      run: touch database/database.sqlite
      
    - name: 🏗️ Run database migrations
      run: php artisan migrate --force
      
    - name: 🌱 Seed database
      run: php artisan db:seed --class=CampusHubSeeder --force
      
    - name: 🚀 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install Node dependencies
      run: npm ci
      
    - name: 🏗️ Build assets
      run: npm run build
      
    - name: 🧪 Run PHPUnit tests
      run: php artisan test
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()

  deploy:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, bcmath, gd, zip, curl, sqlite3
        tools: composer
        
    - name: 🚀 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        composer install --no-dev --optimize-autoloader --no-interaction
        npm ci --only=production
        
    - name: 🏗️ Build production assets
      run: npm run build
      
    - name: 📁 Create deployment archive
      run: |
        tar -czf campus-hub-deployment.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='.github' \
          .
          
    - name: 📤 Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: campus-hub-deployment
        path: campus-hub-deployment.tar.gz
        
    # Deploy to server via SSH
    - name: 🌐 Deploy to production server
      uses: appleboy/ssh-action@v0.1.6
      if: success()
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd ${{ secrets.PRODUCTION_PATH }}
          
          # Backup current deployment
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Download and extract new deployment
          wget -O campus-hub-deployment.tar.gz \
            "${{ secrets.DEPLOYMENT_URL }}/campus-hub-deployment.tar.gz"
          
          mkdir current
          tar -xzf campus-hub-deployment.tar.gz -C current
          cd current
          
          # Set up environment
          cp ../.env.production .env
          
          # Run deployment commands
          php artisan down --refresh=15
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan queue:restart
          php artisan up
          
          # Clean up
          rm ../campus-hub-deployment.tar.gz
          
    # Deploy to Docker registry (optional)
    - name: 🐳 Build and push Docker image
      if: success()
      env:
        DOCKER_BUILDKIT: 1
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker build -t ${{ secrets.DOCKER_USERNAME }}/campus-hub:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/campus-hub:latest
        
    # Send notification
    - name: 📢 Send deployment notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🎓 Campus Hub deployment ${{ job.status }}!
          
          • Repository: ${{ github.repository }}
          • Branch: ${{ github.ref_name }}
          • Commit: ${{ github.sha }}
          • Author: ${{ github.actor }}
          • Workflow: ${{ github.workflow }}
          
          ${{ job.status == 'success' && '✅ Deployment completed successfully!' || '❌ Deployment failed!' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Composer security check
      run: |
        composer install --no-dev
        composer audit
        
    - name: 🔍 Run npm security audit
      run: |
        npm ci
        npm audit --audit-level=moderate
        
    - name: 🔒 Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: php, javascript
        
    - name: 🔒 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
